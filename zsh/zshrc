HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000

# Use Emacs-like keymap in shell
bindkey -e

# Load colors and inititalize `color` associative array
# Usage example: echo $fg_bold[red] test $reset_color
autoload colors
colors



# Completions #
# =========== #

# Configures compinstall to record where it previously
# set the zstyles for itself (if any).
# This way we can run compinstall again and modify
# the existing configuration.
zstyle :compinstall filename '/home/zaur/.zshrc'

# Loads the compinit function into the shell.
# autoload tells Zsh to load the function only when it's first used.
# -U flag ensures the function is not modified by the shell (i.e., it's used as-is).
# -z flag is specific to Zsh and is used to load Zsh-specific functions.
autoload -Uz compinit

# Initializes the Zsh completion system.
compinit


# VCS INFO #
# ======== #
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
# Configure the format of VCS info for Git repositories. The formats '%b' specifies
# that only the branch name (%b is a format specifier for the current branch)
# should be displayed in ${vcs_info_msg_0_}.
zstyle ':vcs_info:git:*' formats ' (%F{red}%b%f)'

# Prompt #
# ------ #
# This enables the prompt_subst option in Zsh, allowing parameter expansions (like variables)
# and command substitutions to be evaluated in the prompt strings.
# This is necessary for dynamically displaying VCS info.
setopt prompt_subst

PROMPT=$'%n@%m %/$vcs_info_msg_0_\n$ '


# Direnv #
# ------ #
eval "$(direnv hook zsh)"

show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV))"
  fi
}
PROMPT='$(show_virtual_env)'$PROMPT


# Window title #
# -----------  #
_show_title(){
  print -Pn "\033]0;${PROMPT_TITLE:-"$USER:%~"}\007"
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd _show_title
_show_title


# Alternatives  #
# ============= #

# cd -> zovide #
# ------------ #
# must come after compinit
eval "$(zoxide init zsh)"


# ls -> eza #
# --------- #

eza_params=(
    '--git'
    '--icons'
    '--group'
    '--group-directories-first'
    '--colour-scale=all'
    '--colour-scale-mode=fixed'
)


alias ls='eza $eza_params'
alias l='eza --git-ignore $eza_params'
alias ll='eza --long $eza_params'
alias la='eza --all --header --long --sort=modified $eza_params'
#
alias lla='eza -lbhHigUmuSa'
alias lx='eza -lbhHigUmuSa@'
alias lt='eza --tree $eza_params'
alias tree='eza --tree $eza_params'


alias cd=z
alias cat='echo "$fg_bold[green]#=====Try an alternative: bat=====#\n $reset_color"; cat'
# alias cd='echo "$fg_bold[green]#=====Try an alternative: z (zoxide)=====#\n $reset_color"; cd'
alias df='echo "$fg_bold[green]#=====Try an alternative: duf=====#\n $reset_color"; df'
alias du='echo "$fg_bold[green]#=====Try an alternative: dust=====#\n $reset_color"; du'
# fd examples: https://www.reddit.com/r/commandline/comments/uibug7/fd_find_but_better/
alias find='echo "$fg_bold[green]#=====Try an alternative: fd=====#\n $reset_color"; find'

# fd - better find
# -H - Include hidden files by default
alias fd='fd -H'

# Run keychain, so that I have to enter ssh key passphrase
# only once
eval $(keychain --eval --quiet id_ecdsa)

export EDITOR=nano
